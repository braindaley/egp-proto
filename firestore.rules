
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Allow users to read and write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow both authenticated users and verified users to create messages
    match /user_messages/{messageId} {
       allow create: if request.auth != null || 
                        (resource == null && 
                         request.resource.data.keys().hasAny(['isVerifiedUser', 'isGuestUser']) && 
                         (request.resource.data.isVerifiedUser == true || request.resource.data.isGuestUser == true));
       // For a real app, you would restrict read access, e.g. to an admin role
       allow read: if true;
       // Allow authenticated users to update their own messages (for linking accounts)
       allow update: if request.auth != null && 
                        (resource.data.userId == request.auth.uid || 
                         request.resource.data.userId == request.auth.uid);
    }
    
    // Allow server-side processes to read and write to the cache
    match /cached_bills/{billId} {
        allow read, write: if true; // In production, you'd likely restrict write access
    }
    
    // Allow read/write access to census data collections
    match /state_census/{stateId} {
        allow read, write: if true; // Public census data
    }
    
    match /district_census/{districtId} {
        allow read, write: if true; // Public census data
    }
    
    // Fallback rule to deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
