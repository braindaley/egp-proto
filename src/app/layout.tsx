
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/toaster";
import { Footer } from "@/components/footer";
import { Header } from "@/components/header";
import { ZipCodeBanner } from "@/components/ui/zip-code-banner";
import { AuthProvider } from "@/hooks/use-auth";
import { ZipCodeProvider } from "@/hooks/use-zip-code";
import type { Congress } from '@/types';

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// This function now contains the logic directly from the API route
// to avoid internal fetch errors during server rendering.
async function getCongresses(): Promise<Congress[]> {
  const API_KEY = process.env.CONGRESS_API_KEY;

  const fallbackCongresses: Congress[] = [
    { name: '119th Congress', number: 119, startYear: '2025', endYear: '2027' },
    { name: '118th Congress', number: 118, startYear: '2023', endYear: '2025' },
    { name: '117th Congress', number: 117, startYear: '2021', endYear: '2023' },
    { name: '116th Congress', number: 116, startYear: '2019', endYear: '2021' },
    { name: '115th Congress', number: 115, startYear: '2017', endYear: '2019' },
  ].sort((a, b) => b.number - a.number) as Congress[];

  if (!API_KEY) {
    console.error('CONGRESS_API_KEY is not defined on the server.');
    return fallbackCongresses;
  }

  const url = `https://api.congress.gov/v3/congress?limit=250&api_key=${API_KEY}`;
  
  try {
    const res = await fetch(url, {
      next: { revalidate: 3600 } // Revalidate every hour
    });

    if (!res.ok) {
      console.error(`Failed to fetch congresses from external API: ${res.status}`);
      return fallbackCongresses;
    }

    const data = await res.json();
    const congresses = (data.congresses || [])
      .filter(Boolean)
      .map((congress: any) => ({
        ...congress,
        number: parseInt(congress.name.match(/(\d+)/)?.[1] || '0', 10)
      }))
      .sort((a: any, b: any) => b.number - a.number);

    if (congresses.length === 0) {
        return fallbackCongresses;
    }

    return congresses;
  } catch (error) {
    console.error('Error in getCongresses (layout):', error);
    return fallbackCongresses;
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const congresses = await getCongresses();
  
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
          <ZipCodeProvider>
            <Header congresses={congresses} />
            {children}
            <Toaster />
            <Footer />
            <ZipCodeBanner />
          </ZipCodeProvider>
        </AuthProvider>
      </body>
    </html>
  );
}
