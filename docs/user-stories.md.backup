# User Stories & Success Criteria

This document outlines the user stories and success criteria for all personas in the advocacy platform.

**Version:** 1.0
**Last Updated:** 2025-10-08

---

## Table of Contents

1. [Regular User Stories](#regular-user-stories)
2. [Organization User Stories](#organization-user-stories)
3. [Admin User Stories](#admin-user-stories)

---

## Regular User Stories

Regular users are members of the public who use the platform to engage with legislation and contact their representatives.

### 1. Browsing Content

#### US-005b: Browse Home Feed with Filters

**As a** user
**I want to** view a homepage with filterable content from all policy categories
**So that** I can discover relevant bills, news, and campaigns across all issues

**Acceptance Criteria:**

- Homepage has multiple sections from top to bottom:

**1. TOP SECTION - Popular Bills:**
- Horizontal scrolling strip showing most popular/active bills across all categories
- Displays bill number and title
- Appears above all other content

**2. ABOUT/ACTIVITY SECTION:**

**When user is NOT logged in:**
- Shows "What is eGutenbergPress?" about card
- Explains platform purpose: All-in-One Hub, Personalized Advocacy, Action Oriented
- Includes "Get Started" CTA button and "Login" link

**When user IS logged in:**
- Shows advocacy activity summary card
- Displays user's recent advocacy messages and actions
- Shows message count, follow count, and engagement stats

**3. INFO SECTION - 3-Column Grid:**
- Column 1 (wider): About card OR advocacy summary (see above)
- Column 2 (medium): "My Federal Representatives" (horizontal scroll list) and "My Local Representatives" (horizontal scroll list with state, city, school board officials)
- Column 3 (narrower): "Take Action Together" (campaigns list), "Act Before the Vote" (federal bills list), "Important bills in [State]" (state bills list)

**4. FILTERABLE FEED SECTION:**

- Filter tabs at top: "For You" | "News" | "Campaigns" | "Bills"
- **For You Tab (default for logged-in users):**
  - Mixed feed of news stories, campaign cards, and bill action cards
  - Personalized based on user's policy interests and followed organizations
  - Premium users: Weighted by political view ratings (Far Left to Far Right)
  - Free users: Basic personalization (followed organizations, watched bills)
- **News Tab:**
  - Displays only news story cards (3-5 stories)
  - Shows grouped stories with source count
  - Each card has "Voice Opinion" CTA
- **Campaigns Tab:**
  - Displays only campaign cards (bill, candidate, and issue campaigns)
  - Shows organization name, position, support/oppose counts
  - Each card has "Take Action" CTA
- **Bills Tab:**
  - Displays only bill action cards (federal and state bills)
  - Shows bill number, title, latest action, status
  - Each card has "Watch" and "Take Action" CTAs
- **For anonymous users:** Default shows "News" tab with popular/recent content
- Selected filter persists during session
- Infinite scroll or pagination for each filtered view

**How It Works:**

The homepage combines content from all 20 policy categories into a personalized experience.

For logged-in users, the "For You" feed prioritizes content based on their saved policy interests, followed organizations, and watched bills. Premium users see content weighted according to their political view settings for each policy area (Far Left to Far Right). Free users see basic personalization based on which organizations they follow and bills they're watching.

For anonymous visitors, the feed shows popular and recent content sorted by how much engagement each item has received (total support and oppose actions). Anonymous users see the "News" tab by default.

Each filter tab (For You, News, Campaigns, Bills) shows different types of content, and the selected filter stays active as the user scrolls through their session. The feed uses federal bills from Congress.gov and state bills from LegiScan, automatically categorizing them into the platform's 20 policy areas so users can easily find content by topic.

---

#### US-006: Browse Federal Bills by Policy Issue

**As a** user
**I want to** browse recent federal legislation grouped by policy categories
**So that** I can stay informed about what Congress is working on

**Acceptance Criteria:**

- User can view bills grouped by policy issue categories (e.g., Climate & Environment, Health Policy, Immigration, etc.)
- Bills show: Title, Bill Number, Latest Action Date and Text
- Bills can be filtered using checkboxes to select one or more policy issues
- Selected filters display as badges with option to clear all
- Each policy issue section shows bill count
- Bills are sorted by most recent action date within each category
- Limit of 20 bills per policy category

**How It Works:**

Bills are organized by policy category (such as Climate & Environment, Health Policy, Immigration, etc.), with each category showing up to 20 of the most recently active bills. Users can select multiple policy issues using checkboxes to filter what they see. Selected filters appear as removable badges at the top of the page. Bills within each category are sorted by when they last had legislative action, showing the newest activity first. The platform fetches federal bill data from Congress.gov to keep information current.

---

#### US-006b: Browse Policy/Issue Homepage with Filters

**As a** user
**I want to** view a dedicated homepage for a specific policy issue with filterable content
**So that** I can see all relevant content (bills, news, campaigns, state bills) for that issue

**Acceptance Criteria:**

- Each of the 20 policy categories has its own homepage at `/issues/{policy-slug}` (e.g., `/issues/climate-energy-and-environment`)
- Page title shows "{Policy Category} News & Action"
- "← All Issues" button to return to home feed
- Homepage has two main sections:

**1. TOP SECTION - 3-Column News & Action:**

- Column 1: US Map showing user's state (if zip code provided)
- Column 2: Top 2-3 news story previews filtered to this policy category
- Column 3: Three subsections:
  - "Take Action Together" - List of organization campaigns on this issue with links
  - "Act Before the Vote" - Latest federal bills in this category
  - "Important bills in [State]" - State bills in this category (if zip code provided)

**2. BOTTOM SECTION - Filterable Feed (Policy-Specific):**

- Filter tabs at top: "For You" | "News" | "Campaigns" | "Bills"
- **For You Tab:**
  - Mixed feed of news stories, campaign cards, and bill action cards
  - All content filtered to this policy category
  - Personalized based on user's interest level in this specific policy
- **News Tab:**
  - Displays only news story cards for this policy category (3-5 stories)
  - Shows grouped stories with source count
  - Each card has "Voice Opinion" CTA
- **Campaigns Tab:**
  - Displays only campaign cards for this policy category
  - Shows bill, candidate, and issue campaigns related to this policy
  - Each card has "Take Action" CTA
- **Bills Tab:**
  - Displays only bill action cards for this policy category
  - Shows federal and state bills filtered to this policy
  - Each card has "Watch" and "Take Action" CTAs
- Selected filter persists during session
- Infinite scroll or pagination for each filtered view

**Technical Requirements:**

- Federal bills: Map Congress.gov policy areas to our 20 site categories
  - Example: Congress.gov "Environmental Protection" → Our "Climate, Energy & Environment"
  - Congress.gov uses ~50 broad policy areas; we consolidate to 20 user-friendly categories
- State bills: Map LegiScan subjects to our 20 site categories
  - Example: LegiScan "ENERGY/CONSERVATION" → Our "Climate, Energy & Environment"
  - LegiScan uses state-specific subjects; we normalize across all states
- Query federal bills where mapped policy area matches selected category
- Query state bills where mapped subjects match selected category and user's state
- Query campaigns where policy area matches selected category
- Filter news stories by policy category keywords
- Separate API endpoints for each filter:
  - GET /api/feed/for-you?policy={slug} (personalized mixed for this policy)
  - GET /api/feed/news?policy={slug} (news stories for this policy)
  - GET /api/feed/campaigns?policy={slug} (campaigns for this policy)
  - GET /api/feed/bills?policy={slug} (bills for this policy)
- Generate static routes for all 20 policy categories at build time
- SEO: Dynamic metadata with policy-specific title and description
- Cache policy-specific feeds for 1 hour

**Note:** See API Documentation > Policy Area Mapping System for complete mapping tables and special cases

---

#### US-007: View Bill Details

**As a** user
**I want to** view detailed information about a specific bill
**So that** I can understand what it does before taking action

**Acceptance Criteria:**

- Bill detail page shows: Full title, Bill number, Congress, Sponsors/Cosponsors
- Shows: Current status, Latest action date and text, Policy area and subjects
- Shows: Committee assignments, Related bills, Amendments
- Shows: AI-generated plain-language summary
- Shows: AI-generated "Support" and "Oppose" arguments
- Shows: Full text links (PDF, HTML) from Congress.gov
- Shows: Voting record if bill has been voted on
- Shows: Active campaigns from organizations related to this bill

**Technical Requirements:**

- Fetch from `bills` table with all related data
- Generate AI summary if not already cached
- Query `campaigns` for this bill
- Cache page for 1 hour

---

#### US-009: Browse State Legislation

**As a** user
**I want to** browse bills in my state legislature
**So that** I can engage with local issues

**Acceptance Criteria:**

- User can select their state
- View recent state bills (last 90 days)
- Bills show: Title, Bill Number, Sponsor, Latest Action, Status
- Can filter by: Chamber, Subject, Status
- Each bill has link to full text on state legislature website
- Integration with LegiScan API for state bill data

**Technical Requirements:**

- Store state bills in `state_bills` table
- Sync from LegiScan API daily
- Filter by user's state from profile

---

#### US-009b: View News Feed by Policy Issue

**As a** user
**I want to** see curated news stories related to each policy issue
**So that** I can stay informed about current events and their legislative context

**Acceptance Criteria:**

- Each policy homepage shows top 3-5 news stories relevant to that policy category
- Home feed shows mix of top stories across all policy categories
- News stories display:
  - Headline
  - Publication date (relative: "2 hours ago", "1 day ago")
  - Preview image (if available)
  - Brief excerpt or summary (first 100-150 characters)
  - Number of sources reporting on this story (e.g., "5 sources")
- Stories refresh daily or multiple times per day for breaking news
- Stories are sorted by: Most Recent, Most Relevant (default)
- Mobile responsive news cards with clean layout
- Click story card to view full grouped story with AI overview

**Technical Requirements:**

- Integration with news API (NewsAPI.org, NewsAPI.ai, or similar)
- API queries filter by keywords related to each policy category
  - Example: "Climate, Energy & Environment" → keywords: "climate change", "renewable energy", "environmental protection", "EPA"
  - Example: "Immigration & Migration" → keywords: "immigration", "border", "DACA", "visa"
- Store news articles in news_articles table with policy_category field
- Sync news feed via scheduled job (every 3-6 hours)
- Cache news feed per policy category for 3 hours
- Group duplicate stories by similar headlines or content similarity (see US-009c)
- Limit to top 5 stories per policy category to avoid overwhelming users

**News API Integration:**

- Use NewsAPI.org or NewsAPI.ai for news aggregation
- Filter by: category, keywords, language (English), country (US)
- Sort by: publishedAt (most recent)
- Exclude: paywalled content, non-credible sources (maintain source whitelist)

---

#### US-009c: View Grouped News Story (Multiple Sources)

**As a** user
**I want to** see news stories grouped when multiple outlets cover the same event
**So that** I can understand different perspectives and source credibility

**Acceptance Criteria:**

- When multiple news sources report on the same story, they are grouped into a single card
- Story card displays:
  - Primary headline (from most credible/popular source)
  - "X sources" badge (e.g., "5 sources")
  - Main story image (from primary source)
  - Preview excerpt
- Clicking the grouped story card opens a detailed view showing:
  - **All Source Headlines:** List of headlines from each source covering this story
  - **Source Logos/Names:** Display each news outlet (CNN, Fox News, NPR, etc.)
  - **Publication Dates:** Show when each source published
  - **Read Links:** "Read on [Source Name]" links to each original article
  - **AI Overview:** AI-generated summary combining perspectives from all sources (see US-09d)
  - **Related Bills:** If story relates to pending legislation, show links to relevant bills
  - **Take Action CTA:** Button to "Voice Your Opinion to Representatives"
- Grouped stories sorted by number of sources (more sources = more important/relevant)
- Visual indicator showing source political lean if applicable (Left, Center, Right)

**Technical Requirements:**

- Story grouping algorithm based on:
  - Headline similarity (using text similarity/embedding comparison)
  - Published date proximity (within 48 hours)
  - Topic/keyword overlap
- Store grouped stories in news_story_groups table
- Link individual articles to groups via news_article_groups junction table
- Calculate source count as aggregate of grouped articles
- Maintain news source metadata: name, logo URL, credibility score, political lean
- Cache grouped story detail pages for 3 hours
- AI summary generation via OpenAI/Anthropic API (see US-09d)

---

#### US-009d: View AI News Overview

**As a** user
**I want to** read an AI-generated overview of a news story that synthesizes multiple sources
**So that** I can quickly understand the story from different perspectives without reading multiple articles

**Acceptance Criteria:**

- Grouped news story detail page includes "AI Overview" section at the top
- AI Overview displays:
  - **Summary:** 3-5 paragraph AI-generated summary synthesizing all source perspectives
  - **Key Points:** Bulleted list of main facts/developments (4-6 bullet points)
  - **Different Perspectives:** If sources present conflicting viewpoints, AI highlights the different angles
  - **Context:** Brief background on why this story matters
  - **Legislative Connection:** If the story relates to pending or recent legislation, AI identifies the relevant bills
- Overview clearly labeled "AI-Generated Overview" with disclaimer
- Overview is neutral and fact-based, avoiding editorial bias
- User can toggle between "Overview" and "Source Articles" tabs
- Overview regenerates when new sources are added to the group (max once per 6 hours)

**Technical Requirements:**

- AI generation using OpenAI GPT-4, Anthropic Claude, or similar
- Prompt engineering to ensure:
  - Neutral, factual tone
  - Synthesis of multiple perspectives
  - Identification of consensus vs. conflicting viewpoints
  - Connection to relevant legislation when applicable
- Input to AI: headlines, excerpts, and full text (if available) from all grouped sources
- Store generated overview in news_story_groups.ai_overview field
- Cache overview for 6 hours
- Regenerate when: new source added to group, or 6 hours elapsed
- Character limit for overview: 800-1500 words
- Include source attribution in AI prompt to ensure factual grounding

**AI Prompt Structure:**
Provide all article headlines and excerpts, then ask AI to:

- Summarize the main story and key developments
- Identify points of consensus across sources
- Note any conflicting perspectives or differing emphasis
- Provide background context on why this story matters
- Identify any related federal or state legislation
- Present information neutrally without editorial opinion

---

#### US-009e: Take Action from News Story

**As a** user
**I want to** voice my opinion to representatives about a news story
**So that** I can engage with current events and make my voice heard

**Acceptance Criteria:**

- Every news story detail page includes prominent "Voice Your Opinion" CTA button
- Clicking CTA button opens advocacy message composer with:
  - **Pre-filled Context:** News story headline and summary auto-populated in message context
  - **Suggested Recipients:** If story relates to specific legislation, suggest relevant representatives (e.g., bill sponsors, committee members)
  - **Default Recipients:** User's own representatives (House rep, both Senators)
  - **Topic:** Auto-populated based on policy category (e.g., "Climate Action", "Immigration Reform")
  - **Position Options:** Support or Oppose (if applicable to story context)
  - **AI Message Draft:** User can click "Get AI Help" to generate message referencing the news story
- User can customize message and recipients before sending
- After sending, user sees confirmation and option to create account (if anonymous)
- Message is logged with reference to the news story for tracking

**Technical Requirements:**

- Store news_story_id reference in user_messages table
- Pass story headline, summary, and policy category to message composer
- AI message generation includes context from news story
  - Prompt: "User wants to contact representatives about [news headline]. Generate advocacy message referencing this news, taking [support/oppose] position."
- If story mentions specific bills, auto-suggest those bills in message context
- Track advocacy messages per news story (analytics for organization dashboard)
- Link to existing advocacy message flow (US-013)

**Business Logic:**

- News stories about legislation → suggest action on that specific bill
- News stories about general issues → suggest action to representatives on the topic
- Encourage users to reference the news story when contacting representatives
- Track which news stories drive the most advocacy engagement

---

#### US-010: Watch Bills

**As a** user
**I want to** watch specific bills
**So that** I can track them in my dashboard

**Acceptance Criteria:**

- User can click "Watch" button on any bill page or campaign card
- Watched bills appear in "Following" section of dashboard
- Dashboard shows count of bills being watched
- Dashboard displays bill details: title, number, latest action date and text
- User can click watched bill to view full details
- User can unwatch bills
- Premium users see full list of watched bills; free users see count only

**Technical Requirements:**

- Create entry in `user_watched_bills` table
- Daily cron job checks for updates to watched bills
- Send notification emails via email service
- User can configure notification preferences in settings

---


#### US-011: Browse Advocacy Organizations

**As a** user
**I want to** browse advocacy organizations
**So that** I can find groups aligned with my values

**Acceptance Criteria:**

- User can view list of all organizations on the platform
- Organizations show: Name, Logo, Description, Focus Areas, Active Campaigns Count
- Can filter organizations by: Focus Area, Activity Level
- Can sort by: Name, Active Campaigns, Total Actions
- Each organization has profile page with full details

**Technical Requirements:**

- Query `organizations` table
- Show `active_campaigns_count` from aggregate
- Cache organization list for 10 minutes

---

#### US-011b: View Organization Public Profile

**As a** user
**I want to** view an organization's public profile page
**So that** I can learn about them and see all their campaigns

**Acceptance Criteria:**

- Each organization has a public profile page at `/organizations/{org-slug}` (e.g., `/organizations/league-of-women-voters`)
- Profile page displays:
  - **Organization Header:**
    - Organization name and logo
    - "Follow" button (if not already following)
    - "Following" badge (if already following)
    - Short description/mission statement
    - Website link
    - Social media links (Twitter, Facebook, Instagram)
  - **Organization Details:**
    - Full description/about section
    - Nonprofit status (501c3, 501c4, etc.)
    - Years active/established date
    - Policy focus areas (tags/badges)
    - Total supporters/followers count
  - **Active Campaigns Section:**
    - List of all active campaigns from this organization
    - Campaign cards show: Bill number/title, Position (Support/Oppose), Reasoning preview, Support/Oppose counts
    - Click campaign card to view full campaign details and take action
    - Filter campaigns by: Status (Active, Ended), Type (Legislation, Issue, Candidate)
    - Sort campaigns by: Most Recent, Most Popular
  - **Impact Stats:**
    - Total messages sent through their campaigns
    - Total actions taken (support + oppose)
    - Success rate (if applicable)
- Mobile responsive layout
- SEO optimized with organization metadata

**Technical Requirements:**

- Query organizations table by slug
- Aggregate campaign data: count active campaigns, total actions, total messages
- Join with user_followed_organizations to show "Following" status for logged-in users
- Display all active campaigns where organization_id matches and status is Active
- Cache organization profile for 10 minutes
- Generate SEO metadata: title, description, Open Graph tags with organization name and description

---

#### US-012: Follow Organizations

**As a** user
**I want to** follow advocacy organizations
**So that** I can see their campaigns and receive updates

**Acceptance Criteria:**

- User can click "Follow" on any organization
- Followed organizations appear in "Following" section
- User's feed prioritizes bills from followed organizations' campaigns
- User receives email updates about new campaigns (if opted in)
- User can unfollow organizations

**Technical Requirements:**

- Create entry in `user_followed_organizations` table
- Include followed orgs in feed algorithm
- Send digest emails weekly (configurable)

---


### 2. Advocacy Messages

#### US-013: Send Message to Representatives (Anonymous or Logged In)

**As a** visitor or registered user
**I want to** send an advocacy message to my representatives
**So that** I can make my voice heard on legislation

**Acceptance Criteria:**

- User can send message WITHOUT being logged in (anonymous mode)
- User enters ZIP code to find their representatives (House, both Senators)
- User can select which representatives to contact (can select all or subset)
- User can choose position: Support or Oppose
- User can write custom message or use AI to generate draft
- User can include personal data fields (name, address, profession, etc.)
- User can upload attachments (PDFs, images) up to 5MB total
- User previews message before sending
- User confirms and sends message
- Message is logged with anonymous session token if not logged in
- User receives confirmation with tracking information
- AFTER sending, user is prompted: "Create account to track this message?"
- If user creates account, message is linked to their account

**Technical Requirements:**

- Allow anonymous message sending (no login required)
- Generate anonymous session token (UUID) for tracking
- Store message in `user_messages` table with `user_id` = NULL initially
- Lookup representatives via `members` table by ZIP code and congressional district
- Generate AI message via OpenAI/Anthropic API
- Send via email (primary) and/or postal mail service
- Return confirmation number
- After account creation, link message via session token
- Track delivery status

---

#### US-014: AI-Assisted Message Drafting

**As a** user drafting a message
**I want** AI to help me write an effective advocacy message
**So that** I can communicate my position clearly

**Acceptance Criteria:**

- User selects "Get AI Help" when composing message
- AI generates personalized message based on:
  - User's position (support/oppose)
  - Bill summary and arguments
  - User's personal information (if shared)
  - User's constituent description (if provided)
- User can regenerate message
- User can edit AI-generated message
- AI stays within character limits (500-2000 words recommended)

**Technical Requirements:**

- Call AI API (OpenAI GPT-4, Anthropic Claude)
- Include bill context, user profile, and position in prompt
- Return message in < 5 seconds
- Cache API calls for same bill+position+user for 24 hours

---

#### US-015: View Message History

**As a** user
**I want to** view all messages I've sent
**So that** I can track my advocacy efforts

**Acceptance Criteria:**

- User can view all sent messages in dashboard
- Messages show: Date sent, Bill, Recipients, Position, Status
- Can filter by: Date range, Bill, Representative, Status
- Can sort by: Date, Bill, Representative
- Free users can see messages from last 30 days
- Premium users can see full history

**Technical Requirements:**

- Query `user_messages` table
- Join with `bills` and `members` for display
- Limit free users to `sent_at > NOW() - 30 days`
- Paginate 20 messages per page

---


### 3. Voter Registration Verification

#### US-005: Verify Voter Registration Status (L2 Political)

**As a** user
**I want to** verify my voter registration status
**So that** I can confirm I'm eligible to send advocacy messages and increase message credibility

**Acceptance Criteria:**

- User prompted to verify voter registration before sending first message (optional but encouraged)
- User enters: First Name, Last Name, Address, City, State, ZIP Code, Birth Year
- System queries L2 Political voter database for matching records
- System displays matching registrations with: Name, Address, Party Affiliation, Registration Status
- User can confirm their registration match
- User can manually enter registration information if not found in L2 database
- Verification status saved to user profile
- Unregistered users see link to vote.gov for registration
- Verified status shown as badge on messages sent to representatives
- User only sees basic verification info (name, address, party, status) - full L2 data is stored privately

**Technical Requirements:**

- Integration with L2 Political API (VoterMapping API)
- L2 API authentication via API key
- Store `voter_registration_verified` boolean in `users` table
- Store `voter_registration_verified_at` timestamp
- Store `l2_voter_id` (L2's unique voter ID) for verified users
- **Store ALL available L2 voter data in `users.l2_voter_data` JSONB field for demographic reporting**
- Cache L2 lookups for 30 days per user
- Fallback to manual entry if L2 API unavailable
- Privacy: Full L2 data NOT visible to user, only to organization reports (anonymized aggregates)

**L2 Data Points Stored (Complete L2 Voter Data Dictionary):**

L2 Political provides **698 consistent variables** in their VM2 Uniform dataset format. When a user verifies as a registered voter, store the **complete L2 API response payload** in the `l2_voter_data` JSONB field.

**Reference:** L2 Political VM2 File Layout (official data dictionary with all 698 fields)
- Documentation: https://www.l2-data.com/datamapping/voter-data-dictionary/
- File Layout: VM2-File-Layout.xlsx (available through L2 Political)

**Key Field Categories (examples from 698 total variables):**

1. **Identity & Registration** (~50+ fields)
   - LALVOTERID (L2's unique voter ID - primary key)
   - Name fields (First, Middle, Last, Suffix, variations)
   - Address fields (Residence, Mailing, components)
   - Registration dates, status, source
   - Age, birthdate, gender

2. **Political Affiliation** (~20+ fields)
   - Party registration (current and historical)
   - Primary party
   - Party change dates and history

3. **Geographic & Districts** (~40+ fields)
   - Congressional District (US House)
   - State Senate/House Districts
   - County, City, Township, Ward
   - Precinct, School District
   - Census tract and block data

4. **Voter History** (~100+ fields, state-specific)
   - General election participation (by year)
   - Primary election participation (by year)
   - Vote method (in-person, mail, early)
   - Ballot return dates
   - Cumulative vote counts
   - Likely voter scores

5. **Modeled Demographics** (~200+ fields)
   - Ethnicity and race (multiple models)
   - Language preference
   - Religion
   - Income estimates (household and individual)
   - Education level
   - Occupation and employment
   - Marital status and household composition
   - Home ownership and property value
   - Presence of children

6. **Consumer & Lifestyle Data** (~200+ fields)
   - Interests and hobbies
   - Media consumption
   - Donation history
   - Magazine subscriptions
   - Vehicle ownership
   - Pet ownership

7. **Contact Information** (~20+ fields)
   - Phone numbers (landline, mobile, multiple)
   - Email addresses
   - Do Not Call flags

8. **Political Scores & Models** (~50+ fields)
   - Partisan scores (Democrat/Republican likelihood)
   - Issue position scores
   - Turnout propensity models
   - Persuasion scores

**Storage & Usage:**
- Store entire L2 API response as-is in `users.l2_voter_data` JSONB field
- All 698 fields preserved for maximum flexibility in reporting
- Not all fields available for all voters (varies by state and data availability)
- Many demographic fields are modeled estimates, not verified facts

**Privacy & Visibility:**
- **User sees:** Only basic verification info (name, address, party, registration status)
- **Platform uses:** Complete dataset for organization demographic reports (anonymized aggregates only)
- **Reports include:** Age ranges, gender, ethnicity, districts, voting history patterns, political scores
- **Never expose:** Individual-level L2 data to organizations or other users

**Use Cases:**
- Organization campaign demographic reports (anonymized aggregates)
- Platform analytics and insights
- Targeting recommendations (aggregate level only)
- Performance analysis by demographic segments

---


### 4. Account Management

#### US-001: Create Account (Post-Message Flow)

**As a** visitor who just sent an advocacy message
**I want to** create an account to track my message and future advocacy
**So that** I can view my message history and save my preferences

**Acceptance Criteria:**

- User is prompted to create account AFTER successfully sending their first advocacy message
- User sees clear value proposition: "Track your messages and impact"
- User can sign up with Auth0 (email/password, Google, or social login)
- Email verification handled by Auth0
- Upon signup, user profile is created in database linked to their pending message
- Previously sent message is associated with new account
- User is redirected to dashboard showing their first message
- Session is established with Auth0 JWT token

**Technical Requirements:**

- Auth0 authentication (OAuth2/OpenID Connect)
- Store pending messages with anonymous session token before account creation
- Link messages to user account after signup via session token
- Store user in PostgreSQL `users` table with Auth0 user ID
- Email verification managed by Auth0

**Success Metrics:**

- 60%+ conversion rate (messages sent → account created)
- < 3 second response time for account creation
- All authentication managed by Auth0

---

#### US-002: Login to Account

**As a** registered user
**I want to** log in with my credentials
**So that** I can access my personalized dashboard and history

**Acceptance Criteria:**

- User can log in via Auth0 Universal Login (email/password, Google, social)
- Invalid credentials show clear error message from Auth0
- Successful login creates session and redirects to dashboard or intended page
- Auth0 "Remember me" extends session duration
- Password reset link available on Auth0 login page
- Account security (rate limiting, brute force protection) handled by Auth0

**Technical Requirements:**

- Auth0 Universal Login integration
- Auth0 JWT token with user claims
- Redirect to `returnTo` parameter if provided
- Validate Auth0 JWT on backend

---

#### US-003: Reset Password

**As a** user who forgot their password
**I want to** reset my password via email
**So that** I can regain access to my account

**Acceptance Criteria:**

- User can request password reset from Auth0 login page
- Password reset email sent by Auth0 to registered address
- Reset link expires after 1 hour (Auth0 default)
- User can set new password (Auth0 password policy)
- Old password is immediately invalidated
- User receives confirmation email after reset

**Technical Requirements:**

- Auth0 password reset flow
- Auth0 email templates (can be customized)
- Auth0 password policy configuration

---

#### US-004: Update Profile Information

**As a** registered user
**I want to** update my personal information
**So that** my representatives can better understand me and my advocacy is more credible

**Acceptance Criteria:**

- User can update: First Name, Last Name, Address, City, State, ZIP Code
- User can update: Birth Year, Gender, Political Affiliation, Education, Profession
- User can update: Military Service status
- User can set "constituent description" (custom narrative about themselves)
- Form validation ensures required fields (name, address, zip) are complete
- Changes are saved to database
- User sees success confirmation

**Technical Requirements:**

- Update `users` table in PostgreSQL
- Validate ZIP code format
- Update `updated_at` timestamp
- Refresh user session data

---

#### US-004b: Set and Manage Location (ZIP Code)

**As a** user (anonymous or logged-in)
**I want to** have my location automatically detected or manually set
**So that** I can see relevant state legislation and find my representatives without repeatedly entering my zip code

**Acceptance Criteria:**

- **For anonymous/new users (no profile address):**
  - System auto-detects approximate zip code from IP address on first visit
  - User sees prompt: "We detected you're in [ZIP]. Is this correct?"
  - User can confirm detected zip or manually enter correct zip
  - Zip code stored in browser session/localStorage
  - US Map on homepage shows detected state
- **For logged-in users WITH address in profile:**
  - System automatically extracts zip code from user's profile address
  - No zip code prompt shown
  - User's state automatically displayed on homepage map
  - State bills section shows legislation from user's state
- **For logged-in users WITHOUT address in profile:**
  - Same as anonymous: IP detection + manual override option
- **Manual update option:**
  - Quick "Change location" link visible on pages showing location-based content (homepage, policy pages)
  - Opens modal/dropdown to enter new zip code
  - Updates session (anonymous) or profile preference (logged-in)
- **Display current location:**
  - US Map shows highlighted state
  - Text displays: "Showing bills for [State]" or "Change location"

**Technical Requirements:**

- IP Geolocation API integration (e.g., ipapi.co, ipgeolocation.io, MaxMind GeoIP2)
  - Free tier acceptable for MVP (1,000-50,000 requests/month)
  - Fallback to manual entry if API unavailable
- For logged-in users: Extract zip from users address or zip_code field
- For anonymous users: Store in localStorage or session cookie
- Update query logic to filter state bills by user's state and find representatives by congressional district
- Privacy: Don't store IP addresses, only detected zip code
- Cache geolocation results in session to minimize API calls

---


### 5. Premium Membership

#### US-016: View Membership Options

**As a** user
**I want to** see membership options and benefits
**So that** I can decide if I want to upgrade

**Acceptance Criteria:**

- Membership page shows comparison: Free vs Premium
- Premium benefits clearly listed:
  - Support the organization
  - Unlimited message history (free users limited to last 30 days only)
  - Advocacy impact analytics (engagement tracking)
  - Customized feed based on policy interests
  - Email digest options (daily, weekly, monthly)
- Pricing shown: $6 per quarter ($24/year)
- "Upgrade to Premium" button available
- FAQs about membership

**Technical Requirements:**

- Static page, no database calls
- Link to `/membership/signup` for upgrade

---

#### US-017: Subscribe to Premium Membership

**As a** free user
**I want to** subscribe to premium membership via Stripe
**So that** I can access premium features

**Acceptance Criteria:**

- User completes profile if not already complete (name, address, demographics)
- User enters payment information securely via Stripe Elements
- User sees pricing: $6 per quarter, auto-renewing
- User must accept terms and conditions
- Payment processed via Stripe
- Upon success, user's membership is upgraded immediately
- User receives confirmation email with receipt
- First payment charged immediately
- Recurring payments scheduled quarterly

**Technical Requirements:**

- Stripe integration (Checkout or Elements)
- Create Stripe Customer for user
- Create Stripe Subscription with quarterly interval
- Store subscription ID in `user_subscriptions` table
- Set `membership_tier` = 'premium' in `users` table
- Set `membership_start_date` = NOW()
- Handle Stripe webhooks for subscription updates

**Stripe Integration:**

- Create Product in Stripe: "Premium Membership"
- Create Price: $6 USD, recurring every 3 months
- Use Stripe Checkout for payment collection
- Webhook events to handle:
  - `checkout.session.completed` - activate membership
  - `invoice.payment_succeeded` - log payment
  - `invoice.payment_failed` - send reminder, retry
  - `customer.subscription.deleted` - downgrade to free

---

#### US-018: Manage Subscription

**As a** premium user
**I want to** manage my subscription
**So that** I can update payment info or cancel

**Acceptance Criteria:**

- User can view subscription status (active, past due, canceled)
- User can see next billing date and amount
- User can update payment method (credit card)
- User can view payment history
- User can cancel subscription (takes effect at end of current billing period)
- User receives confirmation email for any changes

**Technical Requirements:**

- Display Stripe Customer Portal link, OR
- Build custom UI with Stripe API calls:
  - GET /subscriptions/:id - view subscription
  - POST /payment_methods - update card
  - DELETE /subscriptions/:id - cancel subscription
- Show `invoices` from Stripe for payment history
- Handle cancellation via webhook `customer.subscription.deleted`

---

#### US-019: Cancel Subscription

**As a** premium user
**I want to** cancel my subscription
**So that** I'm not charged again

**Acceptance Criteria:**

- User can cancel from subscription settings
- Confirmation dialog warns that premium features will be lost
- User selects reason for cancellation (optional survey)
- Cancellation takes effect at end of current billing period
- User retains premium access until period ends
- User receives cancellation confirmation email
- User can resubscribe at any time

**Technical Requirements:**

- Call Stripe API: `DELETE /subscriptions/:id` with `at_period_end: true`
- Update `user_subscriptions.canceled_at` in database
- Send cancellation email
- Cron job to downgrade users when `subscription_end_date` < NOW()

---


#### US-023: View Advocacy Impact

**As a** premium user
**I want to** see analytics on my advocacy efforts
**So that** I can measure my impact

**Acceptance Criteria:**

- Dashboard shows:
  - Total messages sent
  - Bills engaged with (supported/opposed)
  - Representatives contacted (unique count)
  - Engagement over time (chart)
  - Impact score (calculated metric based on bill outcomes)
  - Success rate (supported bills that became law)
  - Effectiveness score (alignment with outcomes)
- Can filter analytics by date range
- Can export data as CSV

**Technical Requirements:**

- Aggregate data from `user_messages` and `campaign_actions` tables
- Calculate success rate from bill status tracking
- Generate charts with Recharts library
- Export functionality via CSV download

---

---


### 6. Personalization

#### US-020: Set Political Views by Policy Area (Premium)

**As a** premium user
**I want to** set my political perspective for different policy areas
**So that** my advocacy messages can be tailored to my views

**Acceptance Criteria:**

- User can set overall political view on spectrum: Far Left, Center Left, Center/Moderate, Center Right, Far Right
- User can set political view for each policy area:
  - Abortion
  - Climate, Energy & Environment
  - Criminal Justice
  - Death Penalty
  - Defense & National Security
  - Discrimination & Prejudice
  - Drug Policy
  - Economy & Work
  - Education
  - Free Speech & Press
  - Gun Policy
  - Health Policy
  - Immigration & Migration
  - International Affairs
  - LGBT Acceptance
  - National Conditions
  - Privacy Rights
  - Religion & Government
  - Social Security & Medicare
  - Technology Policy Issues
- Settings use slider interface with 5 positions (Far Left to Far Right)
- Can click position labels to jump to specific view
- Views saved to profile
- Premium-only feature (free users see upgrade prompt)

**Technical Requirements:**

- Store in `users.overall_view` and `users.policy_interests` fields
- Each policy area stores value 0-4 (0=Far Left, 4=Far Right)
- Default value is 2 (Center/Moderate)

---

#### US-021: Customized Bill Feed (Premium)

**As a** premium user
**I want** my feed to show bills matching my interests
**So that** I see legislation I care about

**Acceptance Criteria:**

- Feed shows bills from subjects matching user interests (high first)
- Includes bills from followed organizations
- Includes bills user is already watching
- Excludes bills user has already acted on (unless followed)
- Refreshes daily with new bills
- User can toggle back to "All Bills" view

**Technical Requirements:**

- Query `bills` filtered by `policy_area` matching user interests
- Join with `user_watched_bills`, `user_followed_organizations`
- Weight by interest level (high = 3, medium = 2, low = 1)
- Cache personalized feed for 1 hour per user

---

#### US-022: Email Digest Preferences (Premium)

**As a** premium user
**I want to** receive email digests of new legislation
**So that** I stay informed without checking the app daily

**Acceptance Criteria:**

- User can enable/disable email digests
- User can select frequency: Daily, Weekly, Monthly
- User can select topics to include (based on policy interests)
- Digest includes: New bills, Updates to watched bills, New campaigns
- User can unsubscribe from any email
- Preview of digest available in settings

**Technical Requirements:**

- Store preferences in `user_email_preferences` table
- Cron jobs for each frequency (daily, weekly, monthly)
- Generate digest from recent bills matching interests
- Send via email service provider
- Include unsubscribe link in footer

---


---

## Organization User Stories

Organization users are staff members of advocacy groups who have access to the `/partners` portal to manage campaigns.

### 1. Organization Account Management

#### ORG-001: Organization User Login

**As an** organization staff member
**I want to** log in with my credentials
**So that** I can manage my organization's campaigns

**Acceptance Criteria:**

- Organization user has `role` = 'organization' in database
- Login flow same as regular user
- After login, user redirected to `/partners` dashboard
- User can only access organizations they're authorized for
- User can switch between organizations if member of multiple

**Technical Requirements:**

- Check `user_organizations` table for organization access
- Store selected organization in session
- Middleware restricts `/partners` routes to organization users

---

#### ORG-002: Invite Team Members

**As an** organization admin
**I want to** invite team members to manage the organization
**So that** we can collaborate on campaigns

**Acceptance Criteria:**

- Organization admin can send email invites
- Invite includes signup link with organization pre-selected
- Invited user creates account and is automatically added to organization
- Can set permission level: Admin or Editor
- Admin can manage campaigns and settings; Editor can only manage campaigns
- Invite expires after 7 days

**Technical Requirements:**

- Store invites in `organization_invitations` table
- Send invite email with secure token
- Token links to signup flow with `org_invite_token` parameter
- After signup, create entry in `user_organizations` with role

---

### 2. Organization Profile

#### ORG-003: View Organization Profile

**As an** organization user
**I want to** view my organization's public profile
**So that** I can see how we appear to users

**Acceptance Criteria:**

- Shows: Organization name, logo, description, website
- Shows: Nonprofit status, years active
- Shows: Active campaigns count, total supporters
- Shows: Policy focus areas
- Link to public profile page

**Technical Requirements:**

- Query `organizations` table
- Aggregate `campaigns` for count
- Aggregate `campaign_actions` for supporter count

---

#### ORG-004: Edit Organization Profile

**As an** organization admin
**I want to** edit my organization's profile
**So that** we have accurate public information

**Acceptance Criteria:**

- Can update: Name, Logo (upload), Description, Website
- Can update: Nonprofit status, Focus areas
- Can update: Social media links
- Can upload logo (PNG, JPG, max 2MB)
- Changes are saved and reflected immediately on public page
- SEO: Can set meta description for organization page

**Technical Requirements:**

- Update `organizations` table
- Upload logo to cloud storage (AWS S3, Cloudinary)
- Store logo URL in database
- Invalidate cache for organization page

---

### 3. Campaign Management

#### ORG-005: Create Campaign for Federal Bill

**As an** organization user
**I want to** create a campaign for a federal bill
**So that** we can mobilize supporters

**Acceptance Criteria:**

- User searches for bill by number or keyword
- User selects bill from search results
- User sets position: Support or Oppose
- User writes reasoning for position (markdown supported)
- User can set custom call-to-action button text
- User can upload campaign image (optional)
- User can set campaign status: Draft, Active, Paused, Ended
- Campaign is created and appears on organization's campaign list
- If Active, campaign appears on bill detail page for all users

**Technical Requirements:**

- Search `bills` table
- Create entry in `campaigns` table
  - Fields: organization_id, bill_id, position, reasoning, status, image_url, cta_text
- Set `created_at` and `updated_at` timestamps
- Publish to campaign feed if status = 'Active'

---

#### ORG-006: Create Campaign for State Bill

**As an** organization user
**I want to** create a campaign for a state bill
**So that** we can engage on local issues

**Acceptance Criteria:**

- Same as ORG-005 but for state bills
- User selects state first, then searches state bills
- Uses LegiScan data

**Technical Requirements:**

- Search `state_bills` table
- Create entry in `campaigns` with `state_bill_id` instead of `bill_id`

---

#### ORG-007: Create Issue-Based Campaign

**As an** organization user
**I want to** create a campaign not tied to a specific bill
**So that** we can advocate on broader issues

**Acceptance Criteria:**

- User selects "Issue Campaign" type
- User sets: Issue Title, Issue Description, Policy Area
- User writes advocacy message template
- User sets target representatives (can target all, or filter by state, party, committee)
- Campaign appears on homepage and organization page

**Technical Requirements:**

- Create in `campaigns` table with `campaign_type` = 'issue'
- Store target criteria in `target_criteria` JSONB column

---

#### ORG-007b: Create Candidate Advocacy Campaign

**As an** organization user
**I want to** create a campaign endorsing a candidate in an election
**So that** we can mobilize supporters around electoral races

**Acceptance Criteria:**

- User selects "Candidate Campaign" type
- User enters information for both candidates:
  - Candidate 1: Name, Bio/Description
  - Candidate 2: Name, Bio/Description
- User selects which candidate the organization supports
- User sets position: Support (endorsed candidate) or Oppose (other candidate)
- User writes reasoning for endorsement (markdown supported)
- User can set custom call-to-action button text
- User can upload campaign image (optional)
- User can set campaign status: Draft, Active, Paused, Ended
- Campaign displays as card with both candidates and organization's endorsement
- If Active, campaign appears on organization's campaign list
- Users can click support/oppose buttons and "Watch" button

**Technical Requirements:**

- Create entry in `campaigns` table with `campaign_type` = 'candidate' or 'candidate_advocacy'
- Store candidate data in `candidate` JSONB field:
  - `candidate1Name`, `candidate1Bio`
  - `candidate2Name`, `candidate2Bio`
  - `selectedCandidate` (which candidate is endorsed)
- Fields: organization_id, position, reasoning, status, image_url, cta_text
- Set `created_at` and `updated_at` timestamps
- Render using CandidateCampaignCard component on organization page

---

#### ORG-008: Edit Campaign

**As an** organization user
**I want to** edit an existing campaign
**So that** I can update messaging or details

**Acceptance Criteria:**

- Can edit: Position, Reasoning, CTA text, Image, Status
- Cannot edit: Bill (must create new campaign)
- Changes reflected immediately on live campaign page
- Edit history logged (who, when, what changed)

**Technical Requirements:**

- Update `campaigns` table
- Log changes in `campaign_edit_history` table
- Invalidate campaign page cache

---

#### ORG-009: Delete Campaign

**As an** organization admin
**I want to** delete a campaign
**So that** outdated campaigns don't confuse supporters

**Acceptance Criteria:**

- Confirmation dialog warns that deletion is permanent
- Campaign removed from all public listings
- Historical data (messages sent, actions taken) is preserved
- User actions are not deleted, just disassociated from campaign

**Technical Requirements:**

- Soft delete: Set `deleted_at` timestamp in `campaigns` table
- Exclude deleted campaigns from queries
- Keep `campaign_actions` data for historical reporting

---

#### ORG-010: View Campaign Performance Analytics

**As an** organization user
**I want to** view detailed performance analytics for my campaign
**So that** I can understand who is engaging and measure effectiveness

**Acceptance Criteria:**

- Campaign performance page shows:
  - **Vote Counts:** Support count, Oppose count, Total votes
  - **Demographic Breakdown:**
    - Age groups (18-29, 30-49, 50-64, 65+) with percentages
    - Political affiliation (Democrat, Republican, Independent, Other) with percentages
    - Education level (High School, Some College, Bachelor's, Graduate) with percentages
    - Gender (Female, Male, Non-binary, No response) with percentages
  - **Geographic Data:**
    - Top 5 states by participation with bar charts and percentages
  - **Professional Background:** Top professions with bar charts (Education, Healthcare, Technology, Legal, Nonprofit, etc.)
  - **Special Demographics:** Union members, Military families, Veterans, First generation percentages
  - **Engagement Metrics:**
    - Message completion rate
    - Average messages per user
    - Social shares count
- Can export analytics data (CSV, Excel, PDF, JSON) - disabled in prototype
- All demographic data shown as anonymized aggregates

**Technical Requirements:**

- Query `campaign_actions` table for vote counts
- Join with `users` table for demographic data (age, party, education, gender, state, profession)
- Calculate percentages for each demographic category
- Display data using card grids and bar charts
- Mock engagement metrics (to be replaced with actual tracking)
- Pagination and performance optimization for large datasets

---

#### ORG-011: View Message Sent Count

**As an** organization user
**I want to** see how many messages were sent from my campaign
**So that** I can report impact to stakeholders

**Acceptance Criteria:**

- Dashboard shows estimated message count per campaign
- Calculation: (Support count + Oppose count) × 0.75 (assumes 75% completion rate)
- Shows breakdown: Email vs Postal
- Shows delivery success rate
- Shows bounces and failures

**Technical Requirements:**

- Aggregate `campaign_actions` table
- Join with `user_messages` for delivery status
- Apply completion rate multiplier

---

#### ORG-012: Copy Campaign Link

**As an** organization user
**I want to** copy a shareable campaign link
**So that** I can promote it on social media and email

**Acceptance Criteria:**

- Each campaign has unique URL: `/campaigns/{org-slug}/{campaign-slug}`
- Click "Copy Link" button copies to clipboard
- Link can be shared directly
- Landing page shows campaign details and advocacy form

**Technical Requirements:**

- Generate slug from campaign title
- Store in `campaigns.slug` column (unique)
- Clipboard API or fallback for older browsers

---

### 4. Campaign Email Analytics

#### ORG-013: View Campaign Emails

**As an** organization user
**I want to** view all emails sent through my campaign
**So that** I can monitor advocacy activity and demographics

**Acceptance Criteria:**

- Campaign emails page shows:
  - Total emails sent (calculated from support + oppose counts × 75% completion rate)
  - Overall delivery rate
  - Recent messages table with: From (sender name), To (representative), Date, Position
- Can filter messages by demographics:
  - Age group (18-29, 30-49, 50-64, 65+)
  - Political affiliation (Democrat, Republican, Independent, Other)
  - State
  - Profession
- Filter panel shows count of filtered results
- Can export email data (CSV, Excel, PDF, JSON) - disabled in prototype
- Can view individual message details

**Technical Requirements:**

- Query `user_messages` table filtered by campaign_id
- Join with `users` table for demographic data
- Calculate email count: (supportCount + opposeCount) × 0.75
- Mock delivery rate at 87% (to be replaced with actual email service data)
- Pagination for message list

---

---

## Admin User Stories

Admin users have elevated permissions to manage the entire platform, including users, organizations, and system settings.

### 1. User Management

#### ADMIN-001: View All Users

**As an** admin
**I want to** view a list of all users
**So that** I can monitor platform usage

**Acceptance Criteria:**

- Admin dashboard shows paginated user list
- Shows: Name, Email, Membership Tier, Registration Date, Last Login
- Can filter by: Membership tier, Registration date range, Activity status
- Can sort by: Name, Registration date, Last login
- Can search by email or name
- Shows total user count

**Technical Requirements:**

- Query `users` table with filters
- Paginate 50 users per page
- Cache total count for 5 minutes

---

#### ADMIN-002: View User Details

**As an** admin
**I want to** view detailed information about a user
**So that** I can troubleshoot issues or verify information

**Acceptance Criteria:**

- User detail page shows:
  - Full profile (name, address, demographics)
  - Account status (active, suspended, deleted)
  - Membership info (tier, start date, next billing)
  - Activity summary (messages sent, bills followed, organizations followed)
  - Recent messages (last 10)
  - Login history (last 10 logins)
- Can view full message history

**Technical Requirements:**

- Query `users` table with related data
- Join with `user_messages`, `user_watched_bills`, `user_followed_organizations`
- Join with `user_subscriptions` for membership
- Join with `login_history` table

---

#### ADMIN-003: Suspend User

**As an** admin
**I want to** suspend a user account
**So that** I can prevent abuse or policy violations

**Acceptance Criteria:**

- Can suspend user with reason (required)
- Suspended user cannot log in
- Suspended user sees message: "Account suspended. Contact support."
- Can set suspension duration (temporary or permanent)
- Admin can unsuspend at any time
- Suspension logged with admin user ID and timestamp

**Technical Requirements:**

- Set `users.status` = 'suspended'
- Store `suspended_at`, `suspended_by`, `suspension_reason`, `suspension_expires_at`
- Check status on login and block if suspended
- Show suspension message on login page

---

#### ADMIN-004: Delete User

**As an** admin
**I want to** delete a user account
**So that** I can comply with GDPR/data deletion requests

**Acceptance Criteria:**

- Confirmation dialog warns that deletion is permanent
- Option for hard delete (removes all data) or soft delete (anonymizes)
- Hard delete removes: User profile, messages, activity logs
- Hard delete preserves: Anonymized analytics (counts, aggregates)
- Soft delete: Sets email to null, name to "Deleted User", keeps activity data
- Deletion logged in audit log

**Technical Requirements:**

- Hard delete: DELETE from `users`, CASCADE to related tables
- Soft delete: UPDATE `users` SET `email` = NULL, `first_name` = 'Deleted', etc.
- Log in `admin_audit_log` table

---

### 2. Organization Management

#### ADMIN-005: View All Organizations

**As an** admin
**I want to** view all organizations
**So that** I can manage the partner network

**Acceptance Criteria:**

- Shows: Name, Status (pending, active, suspended), Campaigns count, Members count
- Can filter by status
- Can sort by name, campaigns count, date joined
- Can search by name

**Technical Requirements:**

- Query `organizations` table
- Aggregate `campaigns` and `user_organizations` for counts

---

#### ADMIN-006: Approve New Organization

**As an** admin
**I want to** approve organization applications
**So that** only legitimate groups access the platform

**Acceptance Criteria:**

- New organization applications show in "Pending" list
- Application shows: Name, Description, Website, EIN (tax ID), Contact info
- Admin can approve or reject with reason
- Approved organization gets access to `/partners` portal
- Rejected organization receives email with reason
- Approval logged in audit log

**Technical Requirements:**

- Query `organizations WHERE status = 'pending'`
- Update `organizations.status` to 'active' or 'rejected'
- Send notification email
- Log in `admin_audit_log`

---

#### ADMIN-007: Suspend Organization

**As an** admin
**I want to** suspend an organization
**So that** I can prevent misuse of the platform

**Acceptance Criteria:**

- Can suspend with reason
- Suspended org cannot create/edit campaigns
- Existing campaigns are hidden from public
- Org users can still log in but see suspension notice
- Can unsuspend at any time

**Technical Requirements:**

- Set `organizations.status` = 'suspended'
- Exclude suspended orgs' campaigns from public queries
- Show suspension message in `/partners` portal

---

#### ADMIN-008: View Organization Details

**As an** admin
**I want to** view detailed org information
**So that** I can verify legitimacy and monitor activity

**Acceptance Criteria:**

- Shows: Full profile, Contact info, Tax ID (EIN), Members list
- Shows: Campaign list (all campaigns), Analytics (total actions, messages)
- Shows: Audit history (who created campaigns, edits made)
- Can edit organization details

**Technical Requirements:**

- Query `organizations` with all related data
- Join with `campaigns`, `campaign_actions`, `user_organizations`

---

### 3. Payment & Subscription Management

#### ADMIN-009: View All Subscriptions

**As an** admin
**I want to** view all premium subscriptions
**So that** I can monitor revenue and subscription health

**Acceptance Criteria:**

- Shows: User name, Email, Plan (quarterly), Status, Start date, Next billing
- Shows MRR (Monthly Recurring Revenue) and total subscribers
- Can filter by status (active, past_due, canceled)
- Can sort by start date, next billing date
- Can search by user email

**Technical Requirements:**

- Query `user_subscriptions` table
- Join with `users` for display
- Calculate MRR: (Active subscribers × $6) / 3 months

---

#### ADMIN-010: View Subscription Details

**As an** admin
**I want to** view detailed subscription information
**So that** I can troubleshoot billing issues

**Acceptance Criteria:**

- Shows: User info, Stripe Customer ID, Stripe Subscription ID
- Shows: Current status, Start date, Renewal date, Cancellation date (if applicable)
- Shows: Payment history (all invoices)
- Shows: Failed payments and retry schedule
- Can view Stripe dashboard link for this subscription

**Technical Requirements:**

- Query `user_subscriptions` with related data
- Fetch Stripe Subscription and Invoice data via API
- Link to Stripe dashboard: `https://dashboard.stripe.com/subscriptions/{id}`

---

#### ADMIN-011: Issue Refund

**As an** admin
**I want to** issue a refund to a user
**So that** I can handle customer service requests

**Acceptance Criteria:**

- Can select specific invoice to refund
- Can choose partial or full refund
- Must enter reason for refund
- Refund processed via Stripe immediately
- User receives refund confirmation email
- Refund logged in admin audit log

**Technical Requirements:**

- Call Stripe API: `POST /refunds` with `charge_id` and `amount`
- Log in `payment_refunds` table
- Send email notification
- Log in `admin_audit_log`

---

#### ADMIN-012: Apply Credit to Account

**As an** admin
**I want to** apply account credit
**So that** I can compensate for service issues

**Acceptance Criteria:**

- Enter credit amount (in dollars)
- Enter reason for credit
- Credit applied to Stripe customer account
- Credit used for next invoice automatically
- User receives notification of credit
- Credit logged in audit log

**Technical Requirements:**

- Call Stripe API: `POST /customers/{id}/balance_transactions` with negative amount
- Log in `account_credits` table
- Send email notification

---

#### ADMIN-013: Manually Upgrade/Downgrade User

**As an** admin
**I want to** manually change a user's membership tier
**So that** I can handle special cases or support requests

**Acceptance Criteria:**

- Can upgrade free user to premium (without payment)
- Can downgrade premium to free
- Must enter reason
- Change takes effect immediately
- User receives notification email
- Change logged in audit log

**Technical Requirements:**

- Update `users.membership_tier`
- If upgrade without Stripe: Set `users.membership_override` = true
- Send email notification
- Log in `admin_audit_log`

---

#### ADMIN-014: View Payment Failures

**As an** admin
**I want to** see all payment failures
**So that** I can monitor subscription health and reach out to users

**Acceptance Criteria:**

- Shows list of failed payments
- Shows: User, Amount, Failure reason, Retry date, Attempt number
- Can filter by failure reason
- Can mark as resolved (after manual follow-up)
- Can send reminder email to user

**Technical Requirements:**

- Query `payment_failures` table
- Populated by Stripe webhook `invoice.payment_failed`
- Include Stripe failure codes and messages
- Send reminder emails via email service

---

### 4. Platform Analytics

#### ADMIN-015: View Platform Overview

**As an** admin
**I want to** see high-level platform metrics
**So that** I can monitor growth and health

**Acceptance Criteria:**

- Dashboard shows:
  - Total users (all time), new users (last 30 days)
  - Premium subscribers (count), churn rate
  - Total messages sent (all time), messages (last 30 days)
  - Total campaigns (active), total organizations (active)
  - MRR (Monthly Recurring Revenue)
- Charts show trends over time (last 90 days):
  - New signups per day
  - Messages sent per day
  - Revenue per month
- Can export all metrics to CSV

**Technical Requirements:**

- Aggregate from `users`, `user_subscriptions`, `user_messages`, `campaigns`, `organizations`
- Cache dashboard data for 10 minutes
- Generate charts with Recharts

---

#### ADMIN-016: View Advocacy Message Analytics

**As an** admin
**I want to** see all advocacy messages sent
**So that** I can monitor platform usage and quality

**Acceptance Criteria:**

- Shows paginated list of messages (most recent first)
- Shows: Date, User, Bill, Recipients, Position, Delivery status
- Can filter by: Date range, Delivery method, Status, Bill
- Can search by user email or bill number
- Can view full message content
- Can flag inappropriate messages

**Technical Requirements:**

- Query `user_messages` table
- Join with `users`, `bills`, `members` for display
- Paginate 50 messages per page
- Flag sets `flagged` = true, `flagged_by`, `flagged_at`

---

#### ADMIN-017: View Campaign Performance

**As an** admin
**I want to** see all campaigns and their metrics
**So that** I can identify top-performing campaigns

**Acceptance Criteria:**

- Shows all campaigns with metrics: Actions, Messages sent, Engagement rate
- Can sort by any metric
- Can filter by organization, bill, status, date created
- Can export top campaigns report

**Technical Requirements:**

- Query `campaigns` with aggregated `campaign_actions`
- Calculate engagement rate: (Actions / Views) × 100
- Export to CSV

---

### 5. Content Moderation

#### ADMIN-018: Flag Inappropriate Content

**As an** admin
**I want to** flag inappropriate messages or campaigns
**So that** I can maintain platform quality

**Acceptance Criteria:**

- Can flag messages or campaigns with reason
- Flagged content hidden from public view
- Organization/user notified of flag with reason
- Can unflag after review
- Flag history logged

**Technical Requirements:**

- Set `flagged` = true in `user_messages` or `campaigns`
- Store `flag_reason`, `flagged_by`, `flagged_at`
- Send notification email
- Exclude from public queries WHERE `flagged` = false

---

### 6. System Configuration

#### ADMIN-019: Manage API Integrations

**As an** admin
**I want to** configure external API settings
**So that** the platform can sync data correctly

**Acceptance Criteria:**

- Can view/edit API keys for: Congress.gov, LegiScan, Census, FEC, OpenAI, Stripe
- Can test API connections
- Can view API usage stats and rate limits
- Can enable/disable specific integrations
- Changes logged in audit log

**Technical Requirements:**

- Store API keys in `system_settings` table (encrypted)
- Test connection: Make sample API call and return success/failure
- Track API calls in `api_usage_logs` table

---

#### ADMIN-020: View System Logs

**As an** admin
**I want to** view system error logs
**So that** I can troubleshoot issues

**Acceptance Criteria:**

- Shows recent errors (last 1000)
- Shows: Timestamp, Error type, Message, Stack trace, User (if applicable)
- Can filter by error type, date range
- Can search by error message
- Can export logs

**Technical Requirements:**

- Query `error_logs` table
- Populated by application error handlers
- Paginate 100 errors per page

---

#### ADMIN-021: Manage Email Templates

**As an** admin
**I want to** edit system email templates
**So that** I can customize user communications

**Acceptance Criteria:**

- Can view/edit templates for:
  - Welcome email
  - Password reset
  - Email verification
  - Subscription confirmation
  - Subscription failed payment
  - Message sent confirmation
  - Weekly digest
- Preview email before saving
- Supports variables: {firstName}, {resetLink}, etc.
- Changes take effect immediately

**Technical Requirements:**

- Store templates in `email_templates` table
- Use template engine (Handlebars, Mustache) for variables
- Version control: Keep edit history

---

#### ADMIN-022: Audit Log

**As an** admin
**I want to** view all admin actions
**So that** I can ensure accountability

**Acceptance Criteria:**

- Shows all admin actions: User suspensions, Org approvals, Refunds, etc.
- Shows: Admin user, Action type, Timestamp, Details/Reason
- Can filter by admin user, action type, date range
- Can export audit log

**Technical Requirements:**

- All admin actions log to `admin_audit_log` table
- Fields: admin_user_id, action_type, entity_type, entity_id, details (JSONB), created_at

---

---

## Cross-Cutting Requirements

### Security

- All passwords hashed with bcrypt (minimum 10 rounds)
- JWT tokens expire after 24 hours (refresh tokens 30 days)
- HTTPS required on all endpoints
- SQL injection prevention via parameterized queries
- XSS prevention via input sanitization and CSP headers
- CSRF protection on state-changing requests
- Rate limiting on auth endpoints (5 req/15 min)
- Rate limiting on API endpoints (100 req/min per user)

### Performance

- Page load time < 2 seconds (90th percentile)
- API response time < 500ms (median)
- Database query time < 100ms (median)
- Support 1000 concurrent users
- CDN for static assets
- Redis cache for frequently accessed data

### Accessibility

- WCAG 2.1 Level AA compliance
- Keyboard navigation support
- Screen reader support
- Color contrast ratios meet standards
- Form labels and ARIA attributes

### Mobile Responsiveness

- Responsive design works on screens 320px+
- Touch targets minimum 44×44px
- Mobile-first CSS
- Progressive web app (PWA) support

---

**End of Document**
